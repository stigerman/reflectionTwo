**AUTOMATICALLY COMPARE FILES**
-u options stands for unified format
diff -u old-app.html new-app.html
*How did viewing a diff between two versions of a file help you see the bug that was introduced?*
Viewing a diff allows you to see the file made before and after changes were made.
Also it helps tremendously by documenting the differences between the files


**BONUS ACTION**
cd ~                          # change directories to your home directory
mkdir version-control         # make version-control directory
cd version-control            # go to version-control directory
mkdir reflections             # create reflections directory
cd reflections                # go to reflections directory
subl lesson_1_reflections.txt # launch sublime with file called lesson_1_reflections.txt (you can replace subl with another editor here if you prefer a different one)
git log                       #logs the current directory's file revision history
--stat						  #gives statistics on the commit such as insertions, deletions



*VERSION CONTROL*
allows us to manually or automatically save edit and revised with version of a file over time
create store or edit subversions of a file

*How could having easy access to the entire history of a file make you a more efficient programmer in the long term?*
Easily add thoughts, ideas at different points within the development cycle
Learn another programmers thoughts on the codebase as they developed the code.
Easily go to another revision in the event of error or unintended actions on the file

*One Commit per Logical Change*
Good rule of thumb when using commits with GIT.
Too many changes within one commit will make the difference between files hard to understand.
Dont commit if its too big or too small
Dont commit unrelated things within one commit 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros
-Avoid illogical commits
-Allow more concise, clear documentation why a commit was made

Cons
-Potential to add unclear revisions to a file
-Without a systemic commit process some users may add commits that arent related or illogical

**Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?**
Saving multiple files in one commit allows interdependent files to maintain their relationship thru multiple commits
Css, html files often are revised when saving all files as one commit it's easy to see the changes made across all files and how that improved or worsened he experience on the front end. Maybe one commit is to make the page responsive and doing so reflects changes
in all files 
Google Dogs treat each file seperately becuse many of their users won't be using or editing files that are 
dependent on one another. 
**How can you use the commands git log and git diff to view the history of files?**
Git log displays a c


**How might using version control make you more confident to make changes that could break something?**
When using version conrol you can always revert back to a previous commit so it enables you to make code revisions you may have been worried about without version control. Or just too lazy to make.




